#compdef _formctl formctl

function _formctl_cache_policy
{
	local oldp
	oldp=("$1"(Nmh+24))
	(( $#oldp ))
}

function _formctl_commands
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _commands=()
	local _cached_commands="_formctl_commands"

	if _cache_invalid "$_cached_commands" || ! _retrieve_cache $_cached_commands; then
		_commands=(
			"${(f@)"$(formctl --help | sed -ne '/^  [^ -]/{s/^ *//;s/  */:/;p}')"}"
		)

		if (( $#_commands )); then
			_store_cache "$_cached_commands" _commands
		else
			_commands=""
		fi
	fi

	_describe -- 'formctl command' _commands
}

function _formctl_aws_accounts
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _aws_accounts=()
	local _cached_aws_accounts="_formctl_aws_accounts"

	if _cache_invalid "$_cached_aws_accounts" || ! _retrieve_cache $_cached_aws_accounts; then
		_aws_accounts=(
			"${(f@)"$($HOME/repos/TrialSpark/formctl/formctl completion aws-account)"}"
		)

		if (( $#_aws_accounts )); then
			_store_cache "$_cached_aws_accounts" _aws_accounts
		else
			_aws_accounts=""
		fi
	fi

	_values 'AWS Account' "${(@)_aws_accounts}"
}

function _formctl_aws_profiles
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _aws_profiles=()
	local _cached_aws_profiles="_formctl_aws_profiles"

	if _cache_invalid "$_cached_aws_profiles" || ! _retrieve_cache $_cached_aws_profiles; then
		_aws_profiles=(
			"${(f@)"$($HOME/repos/TrialSpark/formctl/formctl completion aws-profile)"}"
		)

		if (( $#_aws_profiles )); then
			_store_cache "$_cached_aws_profiles" _aws_profiles
		else
			_aws_profiles=""
		fi
	fi

	_values 'AWS Profile' "${(@)_aws_profiles}"
}

function _formctl_aws_regions
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _aws_regions=()
	local _cached_aws_regions="_formctl_aws_regions"

	if _cache_invalid "$_cached_aws_regions" || ! _retrieve_cache $_cached_aws_regions; then
		_aws_regions=(
			"${(f@)"$($HOME/repos/TrialSpark/formctl/formctl completion aws-region)"}"
		)

		if (( $#_aws_regions )); then
			_store_cache "$_cached_aws_regions" _aws_regions
		else
			_aws_regions=""
		fi
	fi

	_values 'AWS Region' "${(@)_aws_regions}"
}

function _formctl-auth
{
	typeset -A opt_args
	local curcontext="$curcontext" state line

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'aptible:Authorize the aptible cli'
				'aws:Generate AWS CLI MFA Session'
				'codeartifact:Generate AWS CodeArtifact Repository token'
				'docker:Alias for ecr'
				'ecr:Log docker in to private AWS ECR repository'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(aptible)
					_arguments \
						'(-d --duration)'{-d,--duration=}'[Session duration (Default: 8h)]:duration' \
						'(-e --email)'{-e,--email=}'[Aptible login email (Generated)]:email' \
						'(-i --op-item-name)'{-i,--op-item-name=}'[1Password item name (Default: Aptible)]:name' \
						'(-p --password)'{-p,--password=}'[Aptible login password (Generated)]:password' \
						'(-t --token)'{-t,--token=}'[Aptible authorization token (Generated)]:token'
					;;

				(aws)
					_arguments \
						'(-d --duration)'{-d,--duration=}'[Session duration (Default: 28800)]:duration' \
						'(-f --force)'{-f,--force}'[Force session recreation]' \
						'(-i --op-item-name)'{-i,--op-item-name=}'[1Password item name (Default: AWS)]:name' \
						'(-p --profile)'{-p,--profile=}'[AWS profile for storage (Default: session)]:profile:_formctl_aws_profiles' \
						'(-s --serial-number)'{-s,--serial-number=}'[User MFA arn (Generated)]:arn' \
						'(-u --username)'{-u,--username=}'[Used to generated MFA arn (Default: $USER)]:username' \
					;;

				(codeartifact)
					_arguments \
						'(-d --duration)'{-d,--duration=}'[Session duration (default 28800)]:number' \
						'(-f --force)'{-f,--force}'[Force authorization before expiry]' \
						'(-t --token)'{-t,--token}'[Print out only the auth token]'
					;;

				(docker|ecr|help)
					:
					;;
			esac
			;;
	esac
}

function _formctl-database
{
	typeset -A opt_args
	local curcontext="$curcontext" state line

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'create:Instantiate a new database'
				'purge:Destroy an existing database'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(create)
					_arguments \
						'(-d --database)'{-d,--database=}'[RDS Database name (Defaults to primary)]:database' \
						'(-e --extension)'{-e,--extension=}'[Additional psql extensions (Repeatable)]:extension' \
						'(-P --password-length)'{-P,--password-length=}'[Generated password length. (Default: 32)]:number' \
						'(-p --port)'{-p,--port=}'[Target database port (Default: 5432)]:number' \
						'(-D --disable-vault)'{-D,--disable-vault}'[Disable storing passwords in vault]' \
						'(-M --manager-password)'{-M,--manager-password=}'[Administrator password]:password'
					;;

				(purge)
					_arguments \
						'(-d --database)'{-d,--database=}'[RDS Database name (Defaults to primary)]:' \
						'(-p --port)'{-p,--port=}'[Target database port (Defaults to 5432)]:'
					;;

				(help)
					:
					;;
			esac
	esac
}

function _formctl-docker
{
	typeset -A opt_args
	local curcontext="$curcontext" state line

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'auth:Alias for formctl auth ecr'
				'build:Build target Docker file'
				'list-remote-repos:List docker repositories in ECR'
				'pull:Pull a Docker image from the remote ECR'
				'replicate:Force replication of a target image'
				'url:Print out the ECR repository url'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(build)
					_arguments \
						'(-f --file)'{-f,--file=}'[Path to Dockerfile to build]:file:_files' \
						'(-t --target)'{-t,--target=}'[Docker stage to build]:target' \
						'(-r --repo-path)'{-r,--repo-path=}'[Path to the git repository to build in]:file:_files' \
						'(-R --revision)'{-R,--revision=}'[Version revision]:revision' \
						'(-v --verbose)'{-v,--verbose}'[docker command before running]' \
					;;

				(pull|replicate|url)
					_arguments \
						'(-i --image)'{-i,--image=}'[Docker image name (may contain ':tag')]:image' \
						'(-t --tag)'{-t,--tag=}'[Docker image tag]:tag'
					;;

				(auth|list-remote-repos|help)
					:
					;;
			esac
	esac
}

function _formctl-redshift
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'creds:Generate user credentials for AWS Redshift'
				'conn:Connect to a database on AWS Redshift'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(creds)
					_arguments \
						'(-c --cluster)'{-c,--cluster=}'[Redshift cluster name (Defaults to warehouse)]:cluster' \
						'(-d --duration)'{-d,--duration=}'[Session duration (default 28800)]:number' \
						'(-f --format)'{-f,--format=}'[One of plain, json, pretty (Defaults to plain)]:format' \
						'(-u --username)'{-u,--username=}'[STS Credential Identity]:username'
					;;

				(conn)
					_arguments \
						'(-b --batch)'{-b,--batch=}'[SQL query to execute on the database]:query' \
						'(-c --cluster)'{-c,--cluster=}'[Redshift cluster name (Defaults to warehouse)]:cluster' \
						'(-f --file)'{-f,--file=}'[SQL file to execute on the database]:file:_files' \
						'(-p --port)'{-p,--port=}'[Boundary proxy port to connect through]:port' \
						'(-P --postico)'{-P,--postico}'[connection in Postico.app]' \
						'(-T --table-plus)'{-T,--table-plus}'[connection in TablePlus.app]' \
						'(-u --username)'{-u,--username=}'[STS Credential Identity]:name' \
						'(-v --verbose)'{-v,--verbose}'[connect command before execution]'
					;;

				(help)
					:
					;;
			esac
	esac
}

function _formctl-self
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'update:Synchronize formctl from remote git repository'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(update)
					_arguments \
						'(-c --check)'{-c,--check=}'[Exit 1 if formctl is out of date]' \
						'(-f --force)'{-f,--force=}'[Force update regardless of path]' \
						'(-t <refspec>)'{-t,--target-ref=}'[git ref to pull updates from]:refspec'
					;;

				(help)
					:
					;;
			esac
	esac
}

function _formctl_setup_migrations
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _setup_migrations=()
	local _cached_setup_migrations="_formctl_setup_migrations"

	if _cache_invalid "$_cached_setup_migrations" || ! _retrieve_cache $_cached_setup_migrations; then
		_setup_migrations=(
			"${(f@)"$($HOME/repos/TrialSpark/formctl/formctl setup --list)"}"
		)

		if (( $#_setup_migrations )); then
			_store_cache "$_cached_setup_migrations" _setup_migrations
		else
			_setup_migrations=""
		fi
	fi

	_values 'Setup Migration' "${(@)_setup_migrations}"
}

function _formctl-sre
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'enter-service:Execute command in service task on ECS'
				'restart-service:Restart target ECS service'
				'run-task:Run service task on ECS cluster'
				'help:Display help message'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(enter-service)
					_arguments \
						'(-b --bimini)'{-b,--bimini}'[Enable bimini init process]' \
						'(-C --cluster)'{-C,--cluster=}'[Target host cluster (Default: primary)]:cluster' \
						'(-c --container)'{-c,--container=}'[Target container name (Default: task name)]:container' \
						'(-e --command)'{-e,--command=}'[Command to run (Default: "/bin/bash")]:command' \
						'(-s --stable)'{-s,--stable}'[Always find the same service instance]'
					;;

				(restart-service)
					_arguments \
						'(-c --cluster)'{-c,--cluster=}'[Target host cluster (Default: primary)]:cluster' \
						'(-v --stable)'{-v,--stable}'[Always find the same service instance]'
					;;

				(run-task)
					_arguments \
						'(-c --cluster)'{-c,--cluster=}'[Target host cluster (Default: primary)]:cluster' \
						'(-C --count)'{-C,--count=}'[Number of tasks to start up (Default: 1)]:count' \
						'(-e --env)'{-e,--env=}'[Add env key to instance (repeatable)]:env' \
						'(-F --full-output)'{-F,--full-output}'[Print out request and response json]' \
						'(-n --container-name)'{-n,--container-name=}'[Target container name (Default: task name)]:name' \
						'(-s --subnet)'{-s,--subnet=}'[Subnet to host task (Default: application)]:subnet' \
						'(-S --security-group)'{-S,--security-group=}'[Add security group to task (repeatable)]:group' \
						'(-t --task)'{-t,--task=}'[Name of the service to run]:task'
					;;

				(help)
					:
					;;
			esac
	esac
}

function _formctl_terraspace_stacks
{
	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _terraspace_stacks=()
	local _cached_terraspace_stacks="_formctl_terraspace_stacks"

	if _cache_invalid "$_cached_terraspace_stacks" || ! _retrieve_cache $_cached_terraspace_stacks; then
		_terraspace_stacks=(
			"${(f@)"$($HOME/repos/TrialSpark/formctl/formctl completion terraspace-stacks)"}"
		)

		if (( $#_terraspace_stacks )); then
			_store_cache "$_cached_terraspace_stacks" _terraspace_stacks
		else
			_terraspace_stacks=""
		fi
	fi

	_values 'Setup Migration' "${(@)_terraspace_stacks}"
}

function _formctl_terraspace_subcommands_internal
{
	local subcommand="${1:-}"

	local curcontext="$curcontext"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy

	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _formctl_cache_policy
	fi

	local -a _terraspace_subcommands=()
	local _cached_terraspace_subcommands="_formctl_terraspace${subcommand:+_}${subcommand:-}_subcommands"

	if _cache_invalid "$_cached_terraspace_subcommands" || ! _retrieve_cache "$_cached_terraspace_subcommands"; then
		_terraspace_subcommands=(
			"${(f@)"$(
				command terraspace help ${subcommand:-} | \
					sed -ne 's/^  terraspace'"${subcommand:+ }${subcommand:-}"' \([^ ]*\) [^#]*# \([^.:]*\).\?$/\1:\2/p'
			)"}"
		)

		if (( $#_terraspace_subcommands )); then
			_store_cache "$_cached_terraspace_subcommands" _terraspace_subcommands
		else
			_terraspace_subcommands=""
		fi
	fi

	_describe -- "terraspace${subcommand:+ }${subcommand:-} subcommand" _terraspace_subcommands
}

function _formctl_terraspace_subcommands
{
	_formctl_terraspace_subcommands_internal
}

function _formctl_terraspace_all_subcommands
{
	_formctl_terraspace_subcommands_internal all
}

function _formctl_terraspace_clean_subcommands
{
	_formctl_terraspace_subcommands_internal clean
}

function _formctl_terraspace_new_subcommands
{
	_formctl_terraspace_subcommands_internal new
}

function _formctl_terraspace_state_subcommands
{
	_formctl_terraspace_subcommands_internal state
}

function _formctl_terraspace_tfc_subcommands
{
	_formctl_terraspace_subcommands_internal tfc
}

function _formctl-terraspace
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
		':command:_formctl_terraspace_subcommands' \
		'*::options:->options'

	case $state in
		(options)
			case $line[1] in
				(build)
					_arguments \
						'(--quiet --no-quiet)'--{,no-}quiet'[quiet output]' \
						'(-i --instance)'-{i,-instance=}'[Instance of stack]:instance' \
						'(-y --yes)'-{y,-yes}'[-auto-approve the terraform apply]' \
						'(--verbose --no-verbose)'--{,no-}verbose'[]' \
						'(--noop --no-noop)'--{,no-}noop'[]' \
						':stack:_formctl_terraspace_stacks'
					;;

				(init|refresh)
					_arguments \
						'(-i --instance)'-{i,-instance=}'[Instance of stack]:instance' \
						'(--verbose --no-verbose)'--{,no-}verbose'[]' \
						'(--noop --no-noop)'--{,no-}noop'[]' \
						':stack:_formctl_terraspace_stacks'
					;;

				(plan)
					_arguments \
						'(--auto --no-auto)'--{no-,}auto'[Auto mode is useful for CI automation]' \
						'(--input --no-input)'--{no-,}input'[Ask for input for variables if not directly set]' \
						'(-i --instance)'-{i,-instance=}'[Instance of stack]:instance' \
						'(-o --out)'-{o,-out=}'[Output path. Can be a pattern like :MOD_NAME.plan]:file:_files' \
						'(--reconfigure --no-reconfigure)'--{,no-}reconfigure'[Add terraform -reconfigure option]' \
						'(--copy-to-root --no-copy-to-root)'--{,no-}copy-to-root'[Copy plan file generated in the cache folder back to project root]' \
						'(--verbose --no-verbose)'--{,no-}verbose'[]' \
						'(--noop --no-noop)'--{,no-}noop'[]' \
						':stack:_formctl_terraspace_stacks'
					;;

				(up)
					_arguments \
						'(-j --jira-issue)'{-j,--jira-issue=}'[Jira issue number]:issue' \
						'(-p --pull-request)'{-p,--pull-request=}'[Github pull request number]:number' \
						'(-k --keep-plan)'{-k,--keep-plan}'[Save plan file to local directory]' \
						'(-r --aws-role-name)'{-r,--aws-role-name}'[S3 Access role name (Default: sre)]:name' \
						'(-s --source-identity)'{-s,--source-identity}'[AWS Username (Default: $USER)]' \
						':stack:_formctl_terraspace_stacks'
					;;

				(all|clean|new|setup|state|tfc)
					_arguments \
						":subcommand:_formctl_terraspace_${line[1]}_subcommands" \
						'*::stack:_formctl_terraspace_stacks'
					;;

				(console|down|info|logs|output|providers|seed|show|validate)
					_arguments \
						':stack:_formctl_terraspace_stacks'
					;;

			esac
	esac
}

function _formctl-vault
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
		'1:command:->command' \
		'*::options:->options'

	case $state in
		(command)
			local -a subcommands=(
				'delete:Delete field from target page'
				'read:Read values from vault'
				'write:Update a field with value in the target page'
			)

			_describe -- "${funcstack[1]:1} subcommands" subcommands
			;;

		(options)
			case $line[1] in
				(delete|read|write)
					_arguments \
						'(-a --account)'{-a,--account}'[AWS Account Name (Default: parent flag)]' \
						'(-e --engine)'{-e,--engine}'[Vault engine (Default: secrets)]' \
						'(-s --aws-service)'{-s,--aws-service}'[AWS Service (Default: ecs)]' \
						'(-S --subpath)'{-S,--subpath}'[Additional subpath]'
					;;
			esac
	esac
}

function _formctl
{
	local -A opt_args
	local context state line

	local curcontext="$curcontext"

	_arguments -C \
 		'(-a --aws-account)'{-a,--aws-account=}'[AWS Account to operate on]:account:_formctl_aws_accounts' \
		'(-p --aws-profile)'{-p,--aws-profile=}'[AWS profile to generate credentials from]:profile:_formctl_aws_profiles' \
		'(-s --aws-source-profile)'{-s,--aws-source-profile=}'[Role assumption source (Default: session)]:profile:_formctl_aws_profiles' \
		'(-g --aws-region)'{-g,--aws-region=}'[Target AWS region (default us-east-1)]:profile:_formctl_aws_regions' \
		'(-n --aws-role)'{-n,--aws-role=}'[AWS role name or ARN fro assumption]:role' \
		'(-S --aws-source-identity)'{-S,--aws-source-identity=}'[STS Source Identity for role assumption]:identity' \
		'(-f --tfadmin)'{-f,--tfadmin}'[role name to terraform-administrator]' \
		'(-T --vault-token)'{-T,--vault-token=}'[Vault Token (reads value from disk)]' \
		'(-R --vault-role)'{-R,--vault-role=}'[Vault role name to generate token]:role' \
		'(-U --vault-username)'{-U,--vault-username=}'[Username for LDAP based Vault auth]:username' \
		'(- *)'{-h,--help}'[Display help message]' \
		'(- *)'{-v,--version}'[Display the version and exit]' \
		':command:_formctl_commands' \
		'*::options:->options'

	case "$state" in
		(options)
			case "${line[1]}" in
				(auth|database|docker|redshift|self|sre|terraspace|vault)
					"_formctl-${line[1]}"
					;;

				(help)
					_arguments \
						'(-d --doc)'{-d,--doc}'[out the doc header block]' \
						'(-s --summary)'{-s,--summary}'[out the summary doc line]' \
						'(-u --usage)'{-u,--usage}'[out the usage header block]' \
						':command:_formctl_commands'
					;;

				(setup)
					_arguments \
						'(-c --confirm)'{-c,--confirm}'[Ask for confirmation before fixing]' \
						'(-d --defaults)'{-d,--defaults}'[Add default migrations to run list]' \
						'(-f --fix)'{-f,--fix}'[Automatically fix failed migrations]' \
						'(-l --list)'{-l,--list}'[List possible migrations]' \
						'(-m --migration)'{-m,--migration=}'[Migration to apply (repeatable)]:migration:_formctl_setup_migrations' \
					;;

				(bootstrap)
					:
					;;

				(completion)
					:
					;;

				(path)
					:
					;;
			esac
	esac
}

_formctl "$@"
